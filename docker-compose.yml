version: '3.8'

services:
  ### Микросервисы ###
  #  discovery:
  #    container_name: discovery
  #    build:
  #      context: ./discovery
  #      dockerfile: Dockerfile
  #    ports:
  #      - '8000:8000'
  #    volumes:
  #      - ./config/:/app/config/
  #      - /var/www/logs-beats/dev/discovery:/logs/discovery/
  #    networks:
  #      - oms

  #  gateway:
  #    container_name: gateway
  #    build:
  #      context: ./gateway
  #      dockerfile: Dockerfile
  #    ports:
  #      - '8080:8080'
  #    environment:
  #      - DISCOVERY_DOMAIN=discovery
  #      - GATEWAY_DB_HOST=pgsql
  #    depends_on:
  #      - discovery
  #      - pgsql
  #    networks:
  #      - oms

  ### Базы данных ###
  auth_pgsql:
    image: postgres:latest
    deploy:
      resources:
        limits:
          memory: 512M
    ports:
      - '6430:5432'
    environment:
      POSTGRES_USER: '${DB_USERNAME:-user}'
      POSTGRES_PASSWORD: '${DB_PASSWORD:-secret}'
      POSTGRES_DB: '${DB_DATABASE:-auth}'
    volumes:
      - 'auth:/var/lib/postgresql/data'
    networks:
      - oms
    healthcheck:
      test: [ "CMD", "pg_isready", "-q", "-d", "${DB_DATABASE:-order_management_db}", "-U", "${DB_USERNAME:-user}" ]
      retries: 3
      timeout: 5s
    container_name: auth_pgsql

  payment_pgsql:
    image: postgres:latest
    deploy:
      resources:
        limits:
          memory: 512M
    ports:
      - '6431:5432'
    environment:
      POSTGRES_USER: '${DB_USERNAME:-user}'
      POSTGRES_PASSWORD: '${DB_PASSWORD:-secret}'
      POSTGRES_DB: '${DB_DATABASE:-payment}'
    volumes:
      - 'payment:/var/lib/postgresql/data'
    networks:
      - oms
    healthcheck:
      test: [ "CMD", "pg_isready", "-q", "-d", "${DB_DATABASE:-order_management_db}", "-U", "${DB_USERNAME:-user}" ]
      retries: 3
      timeout: 5s
    container_name: payment_pgsql

  mongo_inventory:
    image: mongo:6.0.11
    container_name: mongo_inventory
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example
    volumes:
      - inventory:/data/db
    ports:
      - "27010:27017"
    networks:
      - oms

  #  mongo_order:
  #    image: mongo:6.0.11
  #    container_name: mongo_order
  #    environment:
  #      MONGO_INITDB_ROOT_USERNAME: root
  #      MONGO_INITDB_ROOT_PASSWORD: example
  #    volumes:
  #      - order:/data/db
  #    ports:
  #      - "27018:27017"
  #    networks:
  #      - oms

  #  mongo_delivery:
  #    image: mongo:6.0.11
  #    container_name: mongo_delivery
  #    environment:
  #      MONGO_INITDB_ROOT_USERNAME: root
  #      MONGO_INITDB_ROOT_PASSWORD: example
  #    volumes:
  #      - delivery:/data/db
  #    ports:
  #      - "27011:27017"
  #    networks:
  #      - oms

  ### Кафка ###
  zookeeper:
    container_name: zookeeper
    image: bitnami/zookeeper:latest
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    ports:
      - "2181:2181"
    networks:
      - oms
    restart: always
    volumes:
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro

  kafka:
    container_name: kafka
    image: bitnami/kafka:latest
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_CFG_BROKER_ID=1
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:29091,PLAINTEXT_HOST://:9092
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:29091,PLAINTEXT_HOST://kafka:9092
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
    networks:
      - oms
    restart: always
    volumes:
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro

  kafdrop:
    container_name: kafdrop
    image: obsidiandynamics/kafdrop:latest
    depends_on:
      - kafka
    ports:
      - "9000:9000"
    environment:
      KAFKA_BROKERCONNECT: kafka:29091
      SERVER_SERVLET_CONTEXTPATH: /kafdrop
    networks:
      - oms
    restart: always
    volumes:
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro

  ### Мониторинги ###
  zipkin:
    container_name: zipkin
    image: openzipkin/zipkin:latest
    ports:
      - "9411:9411"

  grafana:
    build: './grafana'
    container_name: grafana
    ports:
      - "3000:3000"
    volumes:
      - ./grafana:/var/lib/grafana:latest
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    networks:
      - oms

  prometheus:
    container_name: prometheus
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./prometheus:/prometheus
    networks:
      - oms

networks:
  oms:
    driver: bridge

volumes:
  auth:
    driver: local
  #  order:
  #    driver: local
  payment:
    driver: local
  inventory:
    driver: local
  #  delivery:
  #    driver: local
