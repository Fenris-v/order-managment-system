[versions]
springBootVersion = "3.1.5"
springCloudVersion = "4.0.3"
springGatewayVersion = "4.0.6"

caffeineVersion = "3.1.5"
jjwtVersion = "0.12.3"

postgresVersion = "42.7.2"
r2dbcVersion = "1.0.2.RELEASE"
liquibaseVersion = "4.23.0"

springDocVersion = "2.6.0"

prometheusVersion = "1.12.3"
tracingBridgeVersion = "1.2.3"
zipkinVersion = "2.17.2"

koltinReflectVersion = "1.8.20-RC"
koltinSeializationVersion = "1.7.1"

loggingVersion = "6.0.3"
logbackVersion = "7.4"

reactorTestVersion = "3.5.8"

koltinPluginVersion = "1.8.22"

testContainersVersion = "1.19.7"

starterUtilsVersion = "0.0.1-SNAPSHOT"

[libraries]
starterUtils = { module = "com.example.starter.utils:starter-utils", version.ref = "starterUtilsVersion" }

springWebflux = { module = "org.springframework.boot:spring-boot-starter-webflux", version.ref = "springBootVersion" }
springConfig = { module = "org.springframework.cloud:spring-cloud-starter-config", version.ref = "springCloudVersion" }
springBootstrap = { module = "org.springframework.cloud:spring-cloud-starter-bootstrap", version.ref = "springCloudVersion" }
springEureka = { module = "org.springframework.cloud:spring-cloud-starter-netflix-eureka-client", version.ref = "springCloudVersion" }
springConfigClient = { module = "org.springframework.cloud:spring-cloud-config-client", version.ref = "springCloudVersion" }

springConfigServer = { module = "org.springframework.cloud:spring-cloud-config-server", version.ref = "springCloudVersion" }
springEurekaServer = { module = "org.springframework.cloud:spring-cloud-starter-netflix-eureka-server", version.ref = "springCloudVersion" }

caffeine = { module = "com.github.ben-manes.caffeine:caffeine", version.ref = "caffeineVersion" }

springJpa = { module = "org.springframework.boot:spring-boot-starter-data-jpa", version.ref = "springBootVersion" }
springValidation = { module = "org.springframework.boot:spring-boot-starter-validation", version.ref = "springBootVersion" }

springSecurity = { module = "org.springframework.boot:spring-boot-starter-security", version.ref = "springBootVersion" }
springGateway = { module = "org.springframework.cloud:spring-cloud-starter-gateway", version.ref = "springGatewayVersion" }

postgresDriver = { module = "org.postgresql:postgresql", version.ref = "postgresVersion" }
r2dbc = { module = "org.postgresql:r2dbc-postgresql", version.ref = "r2dbcVersion" }
springR2dbc = { module = "org.springframework.data:spring-data-r2dbc", version.ref = "springBootVersion" }
liquibase = { module = "org.liquibase:liquibase-core", version.ref = "liquibaseVersion" }
jdbc = { module = "org.springframework.boot:spring-boot-starter-jdbc", version.ref = "springBootVersion" }

swagger = { module = "org.springdoc:springdoc-openapi-starter-webflux-ui", version.ref = "springDocVersion" }

springAdminClient = { module = "de.codecentric:spring-boot-admin-starter-client", version.ref = "springBootVersion" }
prometheus = { module = "io.micrometer:micrometer-registry-prometheus", version.ref = "prometheusVersion" }
actuator = { module = "org.springframework.boot:spring-boot-starter-actuator", version.ref = "springBootVersion" }
tracingBridge = { module = "io.micrometer:micrometer-tracing-bridge-brave", version.ref = "tracingBridgeVersion" }
zipkin = { module = "io.zipkin.reporter2:zipkin-reporter-brave", version.ref = "zipkinVersion" }

jjwtApi = { module = "io.jsonwebtoken:jjwt-api", version.ref = "jjwtVersion" }
jjwtImpl = { module = "io.jsonwebtoken:jjwt-impl", version.ref = "jjwtVersion" }
jjwtJackson = { module = "io.jsonwebtoken:jjwt-jackson", version.ref = "jjwtVersion" }

mailing = { module = "org.springframework.boot:spring-boot-starter-mail", version.ref = "springBootVersion" }
thymeleaf = { module = "org.springframework.boot:spring-boot-starter-thymeleaf", version.ref = "springBootVersion" }

kotlinReflect = { module = "org.jetbrains.kotlin:kotlin-reflect", version.ref = "koltinReflectVersion" }
serialization = { module = "org.jetbrains.kotlinx:kotlinx-serialization-json", version.ref = "koltinSeializationVersion" }

logging = { module = "io.github.oshai:kotlin-logging-jvm", version.ref = "loggingVersion" }
logback = { module = "net.logstash.logback:logstash-logback-encoder", version.ref = "logbackVersion" }

springTest = { module = "org.springframework.boot:spring-boot-starter-test", version.ref = "springBootVersion" }
reactorTest = { module = "io.projectreactor:reactor-test", version.ref = "reactorTestVersion" }

testContainers = { module = "org.testcontainers:testcontainers", version.ref = "testContainersVersion" }
testContainersJunit = { module = "org.testcontainers:junit-jupiter", version.ref = "testContainersVersion" }
testContainersPostgres = { module = "org.testcontainers:postgresql", version.ref = "testContainersVersion" }

[bundles]
spring = ["springWebflux", "springConfig", "springBootstrap", "springEureka", "springConfigClient"]
jwt = ["jjwtApi", "jjwtImpl", "jjwtJackson"]
postgres = ["postgresDriver", "r2dbc", "liquibase", "jdbc", "springR2dbc"]
mailing = ["mailing", "thymeleaf"]
monitoring = ["springAdminClient", "actuator", "prometheus", "tracingBridge", "zipkin"]
logs = ["logging", "logback"]
test = ["springTest", "reactorTest", "testContainersPostgres", "testContainers", "testContainersJunit"]

[plugins]
kotlin = { id = "org.jetbrains.kotlin.jvm", version.ref = "koltinPluginVersion" }
